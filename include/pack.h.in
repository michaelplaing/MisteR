#ifndef PACK_H
#define PACK_H

#include "mister.h"

#include <Judy.h>

#ifdef __cplusplus
//extern "C" {
#endif /* __cplusplus */

struct connect_hdr;

struct pack_ctx;

typedef struct var_byte_int {
    size_t len;
    uint8_t buf[4];
} var_byte_int;

typedef struct connect_hdr {
    char *name;
    int index;
    char *parent;
    int (*pack_fn)(struct pack_ctx *pctx, struct connect_hdr *chv);
    Word_t value; /* can handle each header_var value including pointers */
    size_t bitpos; // for sub-byte values
    size_t vlen; // for sub-byte values, pointer values & VBIs
    bool exists; // for properties
    uint8_t id; // for properties
    bool isalloc;
    size_t buflen;
    uint8_t *buf;
    bool isptr;
} connect_hdr;

typedef struct pack_ctx {
    uint8_t *buf;
    size_t pos;
    size_t propcnt;
    size_t len;
    connect_hdr *connect_hdrs;
    size_t chdr_count;
    Pvoid_t PJSLArray;
} pack_ctx;

pack_ctx *init_pack_context(size_t bufsize);

int set_header_value(pack_ctx *pctx, char *name, Word_t value);

int reset_header_value(pack_ctx *pctx, char *name);

int pack_connect_buffer(pack_ctx *pctx);

int pack_uint8(pack_ctx *pctx, connect_hdr *chv);

int pack_uint16(pack_ctx *pctx, connect_hdr *chv);

int pack_uint32(pack_ctx *pctx, connect_hdr *chv);

int pack_sprop_uint16(pack_ctx *pctx, connect_hdr *chv);

int pack_sprop_uint32(pack_ctx *pctx, connect_hdr *chv);

int pack_VBI(pack_ctx *pctx, connect_hdr *chv);

int pack_char_buffer(pack_ctx *pctx, connect_hdr *chv);

int pack_flags_alloc(pack_ctx *pctx, connect_hdr *chdr);

int pack_in_parent(pack_ctx *pctx, connect_hdr *chv);

#ifdef __cpluplus
//}
#endif /* __cplusplus */

#endif /* PACK_H */
